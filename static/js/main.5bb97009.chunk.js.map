{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/Error/Error.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","id","title","completed","isSelectedTodo","classNames","onClick","todoActions","TodoFilter","handleChangeQuery","changedQuery","filterActions","value","onChange","e","changedStatus","target","placeholder","style","pointerEvents","Loader","Error","React","memo","color","get","url","delay","fullURL","Promise","resolve","setTimeout","then","a","fetch","response","ok","statusText","json","getUser","userId","TodoModal","selectedTodo","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","hasUserError","setHasUserError","useEffect","loadUser","userFromServer","href","email","name","App","isLoading","setIsLoading","hasError","setHasError","visibleTodos","useMemo","toLowerCase","includes","getFilteredTodos","loadData","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bb97009.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeQueryAction = {\n  type: 'query/CHANGE',\n  payload: string,\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/CHANGE',\n  payload: query,\n});\n\ntype ChangeStatusAction = {\n  type: 'status/CHANGE',\n  payload: Status,\n};\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'status/CHANGE',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/CHANGE':\n      return { ...state, query: action.payload };\n\n    case 'status/CHANGE':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodos;\n\ntype State = Todo[];\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport classNames from 'classnames';\n\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          const isSelectedTodo = currentTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                {\n                  'has-background-info-light': isSelectedTodo,\n                },\n              )}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(todoActions.setTodo(todo));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far', {\n                        'fa-eye': !isSelectedTodo,\n                        'fa-eye-slash': isSelectedTodo,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleChangeSelect = (changedStatus: Status) => {\n    dispatch(filterActions.changeStatus(changedStatus));\n  };\n\n  const handleChangeQuery = (changedQuery: string) => {\n    dispatch(filterActions.changeQuery(changedQuery));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => handleChangeSelect(e.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleChangeQuery(e.target.value)}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              aria-label=\"clear\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleChangeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nexport const Error = React.memo(() => {\n  return (\n    <div style={{ color: 'red' }}>\n      Sorry, something went wrong :C\n    </div>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(async () => {\n      const response = await fetch(fullURL);\n      const {\n        ok,\n        status,\n        statusText,\n      } = response;\n\n      if (!ok) {\n        throw new Error(`${status} - ${statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from '../Loader';\nimport { Error } from '../Error';\n\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: FC<Props> = ({ selectedTodo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setIsUserLoading(true);\n\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setHasUserError(true);\n      } finally {\n        setIsUserLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {user && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {completed\n                    ? 'Done'\n                    : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n\n      {hasUserError && (\n        <Error />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Error } from './components/Error';\n\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as todoActions } from './features/currentTodo';\n\nexport const App: FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredTodos(todos, filter);\n  }, [todos, filter]);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(todosActions.setTodos(todosFromServer));\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {hasError && (\n                <Error />\n              )}\n\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!hasError && !isLoading && (\n                <TodoList\n                  todos={visibleTodos}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          selectedTodo={currentTodo}\n          onClose={() => dispatch(todoActions.removeTodo())}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { Status } from '../types/Status';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filter: { query: string, status: Status },\n) => {\n  const { query, status } = filter;\n\n  const searchedTodos = todos.filter(({ title }) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  });\n\n  return searchedTodos.filter((todo) => {\n    switch (status) {\n      case 'active':\n        return !todo.completed;\n\n      case 'completed':\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}